#!/bin/bash

#TO DO: -error logs
#       -logs to log file
#       
source_file="$1"
property_file="$2"

CBMC_PATH="/home/shooter/FIT/cbmc-4-7-linux-64"


parse_property_file()
{
  local fn=$1

  cat $fn | sed 's/[[:space:]]//g' | perl -n -e '
if(/^CHECK\(init\((\S+)\(\)\),LTL\(G(\S+)\)\)$/) {
  print "ENTRY=$1\n";
  print "PROPERTY=\"--error-label $1\"\n" if($2 =~ /^!label\((\S+)\)$/);
  print "PROPERTY=\"--pointer-check --memory-leak-check\"\n" if($2 =~ /^valid-(free|deref|memtrack)$/);
}'
}

parse_result()
{
  if tail -n 50 "$LOG".ok | grep -q "^[[:space:]]*__CPROVER_memory_leak == NULL$" ; then
    echo 'FALSE(valid-memtrack)'
  elif tail -n 50 "$LOG".ok | grep -q "^[[:space:]]*dereference failure:" ; then
    echo 'FALSE(valid-deref)'
  elif tail -n 50 "$LOG".ok | grep -q "^[[:space:]]*double free$" ; then
    echo 'FALSE(valid-free)'
  elif tail -n 50 "$LOG".ok | grep -q "^[[:space:]]*free argument has offset zero$" ; then
    echo 'FALSE(valid-free)'
  else
    echo FALSE
  fi
}

eval `parse_property_file "$property_file"`

LOG=$(mktemp -t cbmc-log.XXXXXX)
trap "rm -f $LOG $LOG.latest $LOG.ok" EXIT

EC=42
for c in 2 6 12 17 21 40
do
    echo "Unwind: $c" > "$LOG".latest ;
    "$CBMC_PATH"/cbmc -I/usr/include/csmith-2.1.0/ --unwind $c --no-unwinding-assertions --64 $PROPERTY --function "$ENTRY" "$source_file" >> "$LOG".latest 2>&1
    ec=$?

    if [ $ec -eq 0 ] ; then
        if ! tail -n 10 "$LOG".latest | grep -q "^VERIFICATION SUCCESSFUL$" ; then ec=1 ; fi ;
    fi

    if [ $ec -eq 10 ] ; then
        if ! tail -n 10 "$LOG".latest | grep -q "^VERIFICATION FAILED$" ; then ec=1 ; fi ;
    fi

    case $ec in
        0)  EC=0
            mv "$LOG".latest "$LOG".ok
            echo "EC=$EC" >> "$LOG".ok;;
        10) EC=10
            mv "$LOG".latest "$LOG".ok
            echo "EC=$EC" >> "$LOG".ok
            break;;
        *)  if [ $EC -ne 0 ] ; then 
                EC=$ec
                mv "$LOG".latest "$LOG".ok
            fi
            echo "EC=$EC" >> "$LOG".ok
            break;;
    esac
done
  
eval `tail -n 1 "$LOG".ok`

if [ "$STORE_LOGS" == true ]; then
    cat "$LOG".ok 1>&2
fi

case $EC in
  0) echo "TRUE" ;;
  10) parse_result ;;
  *) echo "UNKNOWN" ;;
esac


exit 1